//
//  {{ module_info.name | capitalize }} module - {{ module_info.file_name }}
//  {{ module_info.project_name }}
//
//  Created by {{ developer.name }} on {{ date }}.
//  Copyright Â© {{ year }} {{ developer.company }}. All rights reserved.
//

import UIKit
import RxSwift
import RxCocoa

final class {{ module_info.name | capitalize }}ViewController: UIViewController {
    
    // MARK: - Private properties
    private var customView: {{ module_info.name | capitalize }}View {
        guard
            let customView = view as? {{ module_info.name | capitalize }}View
        else { fatalError("CustomView must have \({{ module_info.name | capitalize }}View.self) type") }
        return customView
    }
    
    private let viewModel: {{ module_info.name | capitalize }}ViewModel
    private let bag = DisposeBag()
    
    init(
        viewModel: {{ module_info.name | capitalize }}ViewModel
    ) {
        self.viewModel = viewModel
        super.init(nibName: nil, bundle: nil)
    }
    
    @available(*, unavailable)
    required init?(coder: NSCoder) { nil }
    
    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        bind(to: viewModel)
    }
    
    override func loadView() {
        view = {{ module_info.name | capitalize }}View(frame: .zero)
    }
}

private extension {{ module_info.name | capitalize }}ViewController {
    func bind(to viewModel: {{ module_info.name | capitalize }}ViewModel) {
        let input = viewModel.input.view
        let output = viewModel.output.view
    }
}
